---
title: "Crash Course"
subtitle: "Predicting Car Insurance Claims"
author: "Jad Darwiche, Griffin Harris, Devin Lai, and Mark Leonardi"
format:
  html:
    toc: true
    embed-resources: true
    echo: false
    link-external-newwindow: true
    
execute:
  warning: false

from: markdown+emoji  
---

## GitHub Repository Link

The link to our project's GitHub Repository is [here](https://github.com/mleonardi6/301-3-final-project).

## Introduction

Car accidents are a unique threat to public health. According to the Centers for Disease Control, injuries and fatalities from motor vehicle accidents contributed to some 922 thousand "years of potential life" lost in the United States in 2020. And yet, despite this number, car accidents do not demand the same degree of attention or solemnity in the public conversation as other leaders in that statistic, like cancer, heart disease, and suicide. Car accidents, indeed, are quotidian.

Researching patterns in car accident data is thus an important challenge. Understanding what causes them, which kinds of cars and people are most likely to be involved them, and what technologies might be most useful in preventing them are steps to building a safer system of transportation and improving public health.

In this project, we offer a small contribution to that understanding. Using a dataset about car insurance policyholders obtained from a recent [Kaggle competition](https://www.kaggle.com/datasets/ifteshanajnin/carinsuranceclaimprediction-classification?select=train.csv), we explore and build predictive models to classify whether policyholders filed a claim within six months of purchasing it based on background information about the car and owner. Through the use of nine different model types, a range of hypertuning parameters, and two recipes, we were able to improve our best model's evaluation metric, `roc_auc`.

## Data Overview

As mentioned, this data originally came from a public competition on Kaggle. Because the Kaggle testing data did not include an outcome variable, we used only the provided training set. This original full training set had nearly 60,000 observations. Initially, we planned to split these observations again, such that were about 45,000 observations in our training data and 15,000 in our testing data. However, after some early attempts to run very basic models, it became clear that such a large dataset was too computationally demanding. We re-loaded the public training set and randomly sampled a small portion of it (while ensuring proportional representation of the outcome variable), such that only 11,719 observations were left to be divided into training and testing splits.

At this stage, our data required minor cleaning and checks for missingness or imbalance in the outcome variable. The data has 43 predictor variables and one outcome variable, a binary titled `is_claim` indicating whether each observation's policyholder filed a claim. Of these 44, 27 required factoring during the initial data reading process. The remainder were numeric variables or, in a several cases, character variables (indicating, for example, the engine and fuel type). In large part because this data came from a public competition---not "real-world" application---there were few issues with messiness or missingness. The graph below shows that there were *no missing values* for any of the predictor variables in our entire dataset.

```{r}
library(tidyverse)
library(tidymodels)
library(naniar)
load("data/car_split.rda")

car_full <- car_test %>% 
  bind_rows(car_train)

gg_miss_var(car_full)
```

There was, however, a large imbalance in the outcome variable `is_claim` that required attention. A value of 0 or "no" for `is_claim` meant that the policyholder had *not* filed a claim within six months of purchasing insurance, while a 1 or "yes" indicated that a claim had been filed. Predictably, a large majority of insurance holders were not involved in accidents, as the graph below of the distribution of `is_claim` in the entire dataset shows.

```{r}
ggplot(car_full, aes(x = is_claim)) +
  geom_bar() +
  theme_minimal() +
  theme(axis.title.y = element_blank())
```

Obviously, the true goal of our model is to be able to predict when a claim *will* be filed, so even though those positive responses are small, they are essential to proper training and testing. Therefore, during our data split, we stratified by `is_claim`. We split the 11,719 observations into a testing set with 70% (or 8,203) of the observations and a training set with the remainder.

The 43 predictor variables in this dataset can be grouped into several categories. These are:

-   **Numeric variables about the car** such as its age, width, height, weight, and turning radius.

-   **Numeric variables about the policyholder's background** such as the person's age and the population density of the area that person lives in. Age, which is encoded as a normalized proportion (i.e., 28 years old is represented as .28), had a slight rightward skew, though not so severe that it required transformation.

-   **Factor variables about the car** including a long list of binaries for the presence of such features as power steering, speed alerts, front fog lights, rear window wipers, and transmission type. In some cases, there were large imbalances in these variables (nearly all cars had factor steering); in others, there was a rough balance (about half had brake assistance).

-   **Miscellaneous variables** that are either uninformative (the policy id) or unwieldy (characters describing the engine type, of which there are many).

At this stage, we conducted an extensive exploratory data analysis on the training split data to reveal relationships between predictor variables and the outcome variables that could guide feature engineering. This analysis revealed several key relationships, which are employed in the model building process.

```{r}
ggplot(car_train, aes(y = age_of_car, x = is_claim)) +
  geom_boxplot()

```


## Methods

# Models

Nine models were fit for this project:

- boosted tree

- elastic net

- KNN

- MARS

- MLP (Neural Network)

- random forest

- SVM radial

- SVM poly

- Null model

Parameters that need to be tuned include:

-   Elastic Net: penalty

- K-Nearest Neighbors: number of nearest neighbors

-   Random Forest: mtry (number of predictors at each split) and min_n (minimum number of data points at a node before it can be split)

-   Boosted tree: mtry, min_n, and learn rate (weight of influence between each iteration)

- MARS: num_terms, prod_degree (highest interaction degree)

- MLP: hidden units and penalty

- SVM radial: cost and rbf_sigma (radial basis function)

- SVM poly: cost, degree, and scale factor

# Recipes

Three recipes were used in this project. The first recipe is a kitchen sink recipe, using `step_dummy()`, `step_nzv()`, `step_normalize()`, and `step_corr()`.

The second and third recipes incorporate interactions. Using EDA, we hand selected predictors that had similar correlations to the outcome variable `is_claim` and created interactions between them. Examples of these predictors include age of car and age of policy holder, as well as height and weight. The third recipe created two way interactions between all variables. Considering this created a set of over 5000 predictors, we chose to only run this recipe on models with short run times, MARS and KNN. 

# Resampling

We used five cross-validation folds, stratified by the response variable `is_claim` to ensure even distribution among folds, to resample our data. Cross validation splits the training data into V folds and trains the model on V-1 of the folds, then tests the model on the last fold. The process repeats so that all folds are used for testing once, and aggregates the evaluation metric between all folds. Resampling is crucial to ensuring we produce the most accurate metrics from each model and reduces the standard error.

# Metric

We used ROC as our metric of evaluation, considering we are evaluating a classification model.

## Model Building and Selection Results

## Final Model Analysis

## Conclusion